{
    "options_section_TreeStyleTabId": {
        "message": "Internal id for Tree Style Tab"
    },
    "options_section_ContextMenu": {
        "message": "Context menu items"
    },
    "options_section_TreeStyleTabStyle": {
        "message": "Custom Tree Style Tab Style"
    },
    "options_section_NewWindowSettings": {
        "message": "Docked Window Settings"
    },
    "options_legend_SidebarTarget": {
        "message": "Sidebar page location"
    },
    "options_legend_PinWorkaround": {
        "message": "Pin temporary tabs"
    },
    "options_legend_TabPosition": {
        "message": "Tab position"
    },
    "options_legend_window_WindowType": {
        "message": "Window type"
    },
    "options_legend_window_BesideCurrentWindow": {
        "message": "Open beside current window"
    },
    "options_legend_window_StartupDetection": {
        "message": "Auto detect & open sidebar windows at startup"
    },
    "options_legend_window_SimulateDocking": {
        "message": "Simulate docking"
    },
    "options_legend_window_AutoClose": {
        "message": "Auto close sidebar windows"
    },
    "options_legend_window_AutoClose_FixDefaultWindowSize": {
        "message": "Workaround for default window size"
    },
    "options_legend_window_WindowFocus": {
        "message": "Window focus"
    },
    "options_legend_window_MultipleSidebarWindows": {
        "message": "Multiple sidebar windows"
    },
    "options_fixSidebarStyle": {
        "message": "Fix some style issues that occur when the Tree Style Tab sidebar page is opened in a tab."
    },
    "options_TreeStyleTabStyle_Info": {
        "message": "This is the style changes made to Tree Style Tab's sidebar by this extension:"
    },
    "options_contextMenu_Root_CustomLabel": {
        "message": "If there are too many context menu items (usually more than one) then they will be gathered under an item with this name (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_contextMenu_ShowOnTabs": {
        "message": "When a tab is right-clicked, show a context menu option to open the sidebar page in a new tab or window."
    },
    "options_contextMenu_showItemOnTabs": {
        "message": "Show this context menu item when a tab is right clicked. (Requires global \"show on tabs\" option.)"
    },
    "options_contextMenu_customLabel": {
        "message": "Custom context menu item label (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_Commands_Title": {
        "message": "Keyboard shortcuts"
    },
    "options_Commands_Info": {
        "message": "Select one of the text inputs bellow and then make a keyboard combination such as \"Alt+X\" to bind the keyboard shortcut to the selected text box. You can also press the \"Prompt\" button and manually write down a keyboard shortcut if you prefer. (Keyboard shortcuts require Firefox 60 or later)"
    },
    "options_Commands_ResetButton": {
        "message": "Reset"
    },
    "options_Commands_PromptButton": {
        "message": "Prompt"
    },
    "options_Commands_PromptButton_Description": {
        "message": "Write text representing a keyboard shortcut. For example \"Alt+X\""
    },
    "options_pinTabsBeforeMove": {
        "message": "Pin temporary tabs so that they don't affect scroll position."
    },
    "options_pinTabsBeforeMove_OnlyAfterCurrent": {
        "message": "Only pin temporary tabs when the current tab is pinned."
    },
    "options_browserAction_OpenInNewWindow": {
        "message": "When the browser action (toolbar button) is clicked, open the sidebar page in a new window. Otherwise it is opened as a new tab in the current window."
    },
    "options_openAfterCurrentTab": {
        "message": "When the sidebar page is opened in a separate tab in the current window, it should be placed after the current tab."
    },
    "options_openAsChildOfCurrentTab": {
        "message": "When the sidebar page is opened in a separate tab in the current window, it should be a child of the current tab. (The new tab must be placed after the current tab.)"
    },
    "options_delayBeforeWindowSeparation": {
        "message": "When the sidebar page is loaded it takes a little while before it has determined what window it should control. Wait this long before moving the sidebar page's tab to a new window: "
    },
    "options_newWindow_popup": {
        "message": "Create the new window without a tab bar. (Might cause some style issues, such as background of pinned tabs area becoming transparent.) (Windows without tab bars can't have sidebars in them.)"
    },
    "options_newWindow_popup_hidden": {
        "message": "The sidebar window should only be accessible to this extension."
    },
    "options_newWindow_besideCurrentWindow": {
        "message": "Create the new window beside the current window (will un-maximize the current window if needed)."
    },
    "options_newWindow_besideCurrentWindow_spaceBetween": {
        "message": "Space between the created window and the current window (can be negative): "
    },
    "options_newWindow_besideCurrentWindow_autoOpenAtStartup": {
        "message": "Auto open a sidebar window for each window when the browser is started."
    },
    "options_newWindow_besideCurrentWindow_autoDetectAtStartup": {
        "message": "Attempt to auto detect docked sidebar windows at extension startup."
    },
    "options_newWindow_besideCurrentWindow_autoDetectAtStartup_delayBeforeWindowSeparation": {
        "message": "Performance might be worse at startup and therefore it might take longer for sidebar pages to load. Time to wait before moving a sidebar page's tab to a new window at startup: "
    },
    "options_newWindow_width": {
        "message": "Width of the created window (-1 for default): "
    },
    "options_newWindow_height": {
        "message": "Height of the created window (-1 for default): "
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_slowInterval": {
        "message": "Simulate \"docking\" of windows by checking the windows position after a time and then moving them if necessary (-1 to disable): "
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_fastInterval": {
        "message": "Check the windows positions faster just after a sidebar window needed to be moved. Faster time between checks (-1 to disable): "
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_minimize": {
        "message": "If parent window is minimized then minimize the sidebar window as well."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_autoClose": {
        "message": "If parent window is closed and the sidebar window doesn't have more than 1 tab then close the sidebar window as well."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_restoreLastSidebarToParentState": {
        "message": "Before the last docked sidebar window is closed it should be set to its parent windows last size. This ensures that new windows opened have a good default size."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_restoreLastSidebarToParentState_onlyLastWindow": {
        "message": "Only when closing the last open window in the browser session."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_autoFocus": {
        "message": "If parent window gets focus then quickly focus docked sidebar windows and then re-focus parent window."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_refocusParent": {
        "message": "If a docked sidebar window gets focus then quickly focus its parent window."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_syncHeight": {
        "message": "The sidebar window should have the same height as the parent window."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_syncWidth": {
        "message": "All sidebar windows should have the same width. (This will sync the width of all docked sidebar windows to the \"Width of the created window\" setting. So each time a docked sidebar window is resized the setting will be changed and if the setting is changed then the docked sidebar windows will be resized.)"
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_tileHeight": {
        "message": "If there are more than one docked sidebar window for a parent window then the sidebar windows should be placed under each other."
    },
    "options_newWindow_besideCurrentWindow_simulateDocking_tileHeight_heightMargin": {
        "message": "Height margin between windows: "
    },
    "options_newWindow_Docked": {
        "message": "The opened window should be docked to the current window."
    },
    "options_Milliseconds": {
        "message": "milliseconds."
    },
    "options_Pixels": {
        "message": "pixels."
    },
    "options_TST_InternalId_Reset": {
        "message": "Reset"
    },
    "options_TST_InternalId_ForceUpdate": {
        "message": "Force Update"
    },
    "options_treeStyleTabInternalId_info": {
        "message": "An extension's internal id is randomized every time the extension is installed, but remains the same when the extension is updated. The \"about:debugging#addons\" page can be used to find an extension's internal id. The internal id is for example used as part of the URL for an extension's web pages."
    },
    "options_requestTreeStyleTabPermission_tabs": {
        "message": "Request \"tabs\" permission from Tree Style Tab. If this permission is granted then Tree Style Tab's internal id can be automatically determined. This is accomplished by using Tree Style Tab's API to open a group tab, then getting that tab's URL from Tree Style Tab and finally parsing the group tab's URL to find the internal id."
    },
    "options_treeStyleTabInternalId": {
        "message": "Cached internal id for Tree Style Tab (used to open Tree Style Tab's sidebar page in a tab):"
    },
    "options_resetSettings": {
        "message": "Reset Settings"
    },
    "options_resetSettings_Prompt": {
        "message": "Do you want to reset all settings to default values?"
    },
    "contextMenu_openSettings": {
        "message": "Tree Style Tab in Separate Window Settings"
    },
    "contextMenu_openSidebarInTab": {
        "message": "Open Tree Style Tab Sidebar in a new tab"
    },
    "contextMenu_openSidebarInWindow": {
        "message": "Open Tree Style Tab Sidebar in a new window"
    },
    "contextMenu_openSidebarInDockedWindow": {
        "message": "Open Tree Style Tab Sidebar in a docked window"
    },
    "contextMenu_setDefaultBrowserAction": {
        "message": "Set Default Action"
    },
    "permissions_required_notification_title": {
        "message": "Can't determine Tree Style Tab's internal id"
    },
    "permissions_required_notification_message": {
        "message": "The id can be entered in the option's page or it can be automatically determined if the \"tabs\" permission is granted from Tree Style Tab's option page in the \"Extra Features via Other Addons\" section.",
        "description": "This text is shown in a notification. The notification has a character limit after which the text is not shown."
    }
}